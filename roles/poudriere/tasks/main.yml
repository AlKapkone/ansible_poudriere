---
# This playbook will Set Up a Poudriere Build System to Create Packages for your FreeBSD Servers 

##======================Install packages==============================##
# Install packages poudriere, nginx and ansibleportmaster

- name:  Install required packages
  pkgng: name={{ item }} state=present
  with_items:
  - poudriere
  - portmaster
  - nginx
  - dialog4ports
##xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx##


##===============Create an SSL Certificate and Key======================##
#We will ensure that we have an ssl directory that contains two subdirectories called keys and certs. 
# - name: Creates certs subdirectory
#   command: mkdir -p /usr/local/etc/ssl/keys
#   become: true

# - file:
#     path: /usr/local/etc/ssl/keys
#     mode: 0600
#     become: true

# - name: Creates certs subdirectory
#   command: mkdir -p /usr/local/etc/ssl/certs
#   become: true

#We will ensure that we have an ssl directory that contains two subdirectories called keys and certs.
- name: Create keys directory
  file: 
    path: /usr/local/etc/ssl/keys
    state: directory
    mode: 0600

- name: Create certs directory
  file: 
    path: /usr/local/etc/ssl/certs
    state: directory

# We can lock down the directory so that users without root or sudo privileges 
#will be unable to interact with the directory or its contents: 
# - name: Chmod /usr/local/etc/ssl/keys
#   command: chmod 0600 /usr/local/etc/ssl/keys
#   become: true

# Next, we will generate a 4096 bit key called poudriere.key, 
# and place it in our keys directory by typing:
- name: Generate a 4096 bit key
  command: openssl genrsa -out /usr/local/etc/ssl/keys/poudriere.key 4096
  become: true

# After the key is generated, we can create a public cert from it by typing:
- name: Create a public cert from generated key
  command: openssl rsa -in /usr/local/etc/ssl/keys/poudriere.key -pubout -out /usr/local/etc/ssl/certs/poudriere.cert
  become: true
#We now have the SSL components we need to sign packages and verify the signatures.
##xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx##


##====================Configuring Poudriere=============================##

- name: Create 'poudriere.conf' file
  template: src=poudriere.conf.j2 dest=/usr/local/etc/poudriere.conf
##xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx##


##==============Creating the Build Environment==========================##

#poudriere will build ports in an isolated environment using jails
- name: Create Poudriere jails
  command: poudriere jail -c -j {{ item.name }}{{ item.architecture }} -v {{ item.version }}
  with_items:
  - { architecture: 'x64', version: '11.1-RELEASE', name: 'freebsd_11-1' }
  # - { architecture: 'x64', version: '10.1-RELEASE', name: 'freebsd_10-1' }
  register: create_jails
  become: true


#To update jail
- name: Update jail
  # command: poudriere jail -u -j {{ item.item.name }}{{ item.item.architecture }}
  command: poudriere jail -u -j freebsd_11-1x64
  when: create_jails|succeeded
  become: true


# We can use the -p flag to name our ports tree. We will call our tree "HEAD". 
# We will be updating it regularly to match the most current version of the ports tree available:
- name: Create Poudriere ports tree
  command: poudriere ports -c -p HEAD
  ignore_errors: yes
  register: result
  become: true


#To update your ports tree
- name: Update ports tree
  command: poudriere ports -u -p HEAD
  when: result|succeeded
  become: true


#remove any unneeded dependencies from system to keep the port list as clean as possible.
- name: Remove unneeded dependencies
  command: pkg autoremove
  become: true

# # The portmaster command can output a list of explicitly installed ports (not dependencies) 
# #in the correct format by using the --list-origins option.
# # We can pipe this output into sort to alphabetize the list to make it easier to find items. 
# # We can output the results to a file in the /usr/local/etc/poudriere.d directory. 
# # We will call this file port-list:
# - name: Output a list of explicitly installed ports
#   command: portmaster --list-origins | sort -d | sudo tee /usr/local/etc/poudriere.d/port-list
  
# # If you use specific make.conf options to build your ports, you can create a make.conf file for each jail within your /usr/local/etc/poudriere.d directory.
# # Inside, you can put any options you would like to use when building your ports.
# - name: Create Poudriere jails 'make.conf' file
#   copy: src=poudriere_make.conf dest=/usr/local/etc/poudriere.d/freebsd_11-1x64-make.conf

# #Creates 
# - name: Create '/usr/local/etc/poudriere.d/freebsd_10-1x64-options' dir
#   file: path=/usr/local/etc/poudriere.d/freebsd_11-1-options state=directory
  

# # We can copy the options we have already been using on our host system by typing:
# # - name: Copy the options
# #   command: cp -r /var/db/ports/* /usr/local/etc/poudriere.d/freebsd_11-1-options
# #   ignore_errors: yes
# #   become: true

# # We can configure anything which has not been already configured using the options command.
# # We should pass in both the port tree we created (using the -p option) 
# #and the jail we are setting these options for (using the -j option). 
# # We also must specify the list of ports we want to configure using the -f option.
# - name: Configure anything which has not been already configured
#   command: poudriere options -j freebsd_11-1x64 -p HEAD -f /usr/local/etc/poudriere.d/port-list
#   become: true
# ##xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx##


# ##=================Building the Ports==========================##
# # We can kick off the bulk build process.

# # To start the build, we just need to use the bulk command 
# #and point to all of our individual pieces that we have been configuring.
# - name: Building the Ports
#   command: poudriere bulk -j freebsd_11-1x64 -p HEAD -f /usr/local/etc/poudriere.d/port-list
#   become: true
# ##xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx##


# ##====Setting Up Nginx to Serve the Front End and Repository====##
# # Enable Nginx service by adding line to the /etc/rc.conf file.
# - name: Enable Nginx service
#   command: sh -c "echo 'nginx_enable=\"YES\"' >> /etc/rc.conf"
#   become: true

# # Create 'nginx.conf' file from templates folder
# - name: Create 'nginx.conf' file
#   template: src=nginx.conf.j2 dest=/usr/local/etc/nginx/nginx.conf

# # With the current settings, if you click on a log in the web browser, it will download the file instead of displaying it as plain text. 
# # We can change this behavior by marking files ending in .log as plain text files.
# - name: Copy the Nginx mime.types file
#   copy: src=mime.types dest=/usr/local/etc/nginx/mime.types


# - name: Check the syntax of your configuration files
#   command: service nginx configtest
#   become: true

# # If your configuration test reports no syntax errors, start Nginx by typing:
# - name: Start Nginx
#   command: service nginx start
#   become: true
# ##xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx##


# ##===Configuring the Build Server to Use Its Own Package Repo===##

# # First, we need to make a directory to hold our repository configuration files:
# - name: Create '/usr/local/etc/pkg/repos' dir
#   file: path=/usr/local/etc/pkg/repos state=directory
#   register: repos_dir


# #Inside this directory, we can create our repository configuration file
# #where we will point to the location on disk where our packages are stored.
# #!!This should be a directory that combines your jail name and port tree name with a dash.!!
# - name: Create 'poudriere.conf' file
#   template: src=repo_poudriere.conf.j2 dest=/usr/local/etc/pkg/repos/poudriere.conf
#   when: repos_dir|success

# #!!!!!!!!!!OPTIONAL!!!!!!!!!!!#
# #If you chose only to install packages that !!you have custom built yourself!! (the safer route), 
# #you can disable the default repositories. 
# #You can do this by creating a different repo file that overrides the default repository file and disables it:
# - name: Create 'freebsd.conf' file that overrides the default repository
#   template: src=freebsd.conf.j2 dest=/usr/local/etc/pkg/repos/freebsd.conf
# #!!!!!!!!!!OPTIONAL!!!!!!!!!!!#


# # Update your package list by typing:
# - name: Update package list
#   command: pkg update
#   become: true
# #!!Now, your server can use the pkg command to install packages from your local repository!!


# ##==Preconfiguring Remote Clients to Use Custom Build Machine's Repository==##
# # OpenSSL comes with an SSH agent that can be started by typing:
# - name: Start SSH agent
#   command: eval $(ssh-agent)

# # Next, we will need to add our SSH key to it by typing:
# - name: Update
#   command: ssh-add

# # We can kick off the bulk build process.
# - name: Update
#   command: ssh -A freebsd@client_domain_or_IP
# ##xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx##