---
# This playbook will configure Remote Clients Servers to use custom Package Repository

##===Configuring Remote Clients Servers to use custom Package Repository===##


##===============Create an SSL Certificate and Key======================##
# We will ensure that we have an ssl directory that contains two subdirectories called keys and certs. 
- name:    Creates on ssl directory two subdirectories called keys and certs
  command: sudo mkdir -p /usr/local/etc/ssl/{keys,certs}


# This command will connect to the build machine from your client machine using your local SSH credentials.
# Once connected, it will display the contents of your certificate file 
#and pipe it through the SSH tunnel back to your remote client machine. 
# From there, we use the sudo tee combination to write the certificate to our directory.

- name:    Creates on ssl directory two subdirectories called keys and certs
  command: ssh root@{{reposerver_ip}} 'cat /usr/local/etc/ssl/certs/poudriere.cert' | sudo tee /usr/local/etc/ssl/certs/poudriere.cert


##===Configuring Remote Server to Use Package Repo===##

# Once this is complete, we can make our repository directory structure 
#just as we did on the build machine itself:
- name: Create '/usr/local/etc/pkg/repos' dir
  file:     path=/usr/local/etc/pkg/repos state=directory
  register: repo_dir


# Now, we can create a repository file that is very similar to the one we used on the build machine:
- name: Create 'poudriere.conf' file
  template: src=repo_poudriere.conf.j2 dest=/usr/local/etc/pkg/repos/poudriere.conf
  when: repo_dir|success


#!!!!!!!!!!OPTIONAL!!!!!!!!!!!#
# If you chose only to install packages that !!you have custom built yourself!! (the safer route), 
#you can disable the default repositories. 
# You can do this by creating a different repo file that overrides the default repository file and disables it:
- name: Create 'freebsd.conf' file that overrides the default repository
  template: src=freebsd.conf.j2 dest=/usr/local/etc/pkg/repos/freebsd.conf
#!!!!!!!!!!OPTIONAL!!!!!!!!!!!#


# Update your pkg database to begin using your custom compiled packages::
- name:    Update
  command: sudo pkg update
#!!Now, your server can use the pkg command to install packages from your custom repository!!
#This procedure can be repeated on as many FreeBSD client machines as you would like.
##xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx##










##==============Creating the Build Environment==========================##

#poudriere will build ports in an isolated environment using jails
- name:    Create Poudriere jails
  command: sudo poudriere jail -c -j {{ item.name }}{{ item.architecture }} -v {{ item.version }}
  with_items:
  - { architecture: 'x64', version: '11.1-RELEASE', name: 'freebsd_11-1' }
  # - { architecture: 'x64', version: '10.1-RELEASE', name: 'freebsd_10-1' }
  register: create_jails

#To update jail
- name:       Update ports tree
  command:    sudo poudriere jail -u -j {{ item.item.name }}{{ item.item.architecture }}
  with_items: create_jails.results
  when:       create_jails|succeeded


# We can use the -p flag to name our ports tree. We will call our tree "HEAD". 
# We will be updating it regularly to match the most current version of the ports tree available:
- name: Create Poudriere ports tree
  command:       sudo poudriere ports -c -p HEAD
  ignore_errors: yes
  register:      result

#To update your ports tree
- name:    Update ports tree
  command: sudo poudriere ports -u -p HEAD
  when:    result|succeeded


#remove any unneeded dependencies from system to keep the port list as clean as possible.
- name:    Remove unneeded dependencies
  command: sudo pkg autoremove

# The portmaster command can output a list of explicitly installed ports (not dependencies) 
#in the correct format by using the --list-origins option.
# We can pipe this output into sort to alphabetize the list to make it easier to find items. 
# We can output the results to a file in the /usr/local/etc/poudriere.d directory. 
# We will call this file port-list:
- name:    Output a list of explicitly installed ports
  command: portmaster --list-origins | sort -d | sudo tee {{ item.port_list_dir }}
  with_items:
  - { port_list_dir: '/usr/local/etc/poudriere.d/port-list' }
  register: list_of_installed_ports


# If you use specific make.conf options to build your ports, you can create a make.conf file for each jail within your /usr/local/etc/poudriere.d directory.
# Inside, you can put any options you would like to use when building your ports.
- name: Create Poudriere jails 'make.conf' file
  copy: src=poudriere_make.conf dest=/usr/local/etc/poudriere.d/{{ item.item.name }}{{ item.item.architecture }}-make.conf
  with_items: create_jails.results

#Creates 
- name: Create '/usr/local/etc/poudriere.d/freebsd_10-1x64-options' dir
  file:       path=/usr/local/etc/poudriere.d/{{ item.item.name }}-options state=directory
  with_items: create_jails.results
  register:   options_dir


# We can copy the options we have already been using on our host system by typing:
- name: Copy the options
  copy: sudo cp -r /var/db/ports/* /usr/local/etc/poudriere.d/{{ item.item.name }}-options
  with_items: create_jails.results
  when: options_dir | success
  
# We can configure anything which has not been already configured using the options command.
# We should pass in both the port tree we created (using the -p option) 
#and the jail we are setting these options for (using the -j option). 
# We also must specify the list of ports we want to configure using the -f option.
- name: Configure anything which has not been already configured
  copy: sudo poudriere options -j {{ item.item.name }}{{ item.item.architecture }} -p HEAD -f {{ item.item.port_list_dir }}
  with_items:
    - create_jails.results
    - list_of_installed_ports.results
  register: opt_result
##xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx##


##=================Building the Ports==========================##
# We can kick off the bulk build process.

# To start the build, we just need to use the bulk command 
#and point to all of our individual pieces that we have been configuring.
- name: Building the Ports
  copy: sudo poudriere bulk -j {{ item.item.name }}{{ item.item.architecture }} -p HEAD -f {{ item.item.port_list_dir }}
  with_items:
    - create_jails.results
    - list_of_installed_ports.results
  when: opt_result|succeeded
##xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx##


##====Setting Up Nginx to Serve the Front End and Repository====##
# Enable Nginx service by adding line to the /etc/rc.conf file.
- name:     Enable Nginx service
  command:  sudo sh -c "echo 'nginx_enable=\"YES\"' >> /etc/rc.conf"
  
# Create 'nginx.conf' file from templates folder
- name:     Create 'nginx.conf' file
  template: src=nginx.conf.j2 dest=/usr/local/etc/nginx/nginx.conf


- name: Edit the Nginx mime.types file
  replace:
    dest:    /usr/local/etc/nginx/mime.types
    regexp:  '    text/plain                            txt;'
    replace: '    text/plain                            txt log;'


- name:    Check the syntax of your configuration files
  command: sudo service nginx configtest


# If your configuration test reports no syntax errors, start Nginx by typing:
- name:    Start Nginx
  command: sudo service nginx start
##xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx##


##===Configuring the Build Server to Use Its Own Package Repo===##

# First, we need to make a directory to hold our repository configuration files:
- name: Create '/usr/local/etc/pkg/repos' dir
  file:     path=/usr/local/etc/pkg/repos state=directory
  register: repos_dir


#Inside this directory, we can create our repository configuration file
#where we will point to the location on disk where our packages are stored.
#!!This should be a directory that combines your jail name and port tree name with a dash.!!
- name: Create 'poudriere.conf' file
  template: src=poudriere.conf.j2 dest=/usr/local/etc/pkg/repos/poudriere.conf
  when: repos_dir|success

#!!!!!!!!!!OPTIONAL!!!!!!!!!!!#
#If you chose only to install packages that !!you have custom built yourself!! (the safer route), 
#you can disable the default repositories. 
#You can do this by creating a different repo file that overrides the default repository file and disables it:
- name: Create 'freebsd.conf' file that overrides the default repository
  template: src=freebsd.conf.j2 dest=/usr/local/etc/pkg/repos/freebsd.conf
#!!!!!!!!!!OPTIONAL!!!!!!!!!!!#

# Update your package list by typing:
- name:    Update
  command: sudo pkg update
#!!Now, your server can use the pkg command to install packages from your local repository!!